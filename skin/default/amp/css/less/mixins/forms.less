//
// Custom rules for forms
//
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"],
.radio input[type="radio"],
.radio-inline input[type="radio"] {
	margin-top: 2px;
}

textarea.form-control {
	min-width: 100%;
	max-width: 100%;
	width: 100%;
}

//
// Forms
// --------------------------------------------------


// Normalize non-controls
//
// Restyle and baseline non-control form elements.

// Normalize form controls
//
// While most of our form styles require extra classes, some basic normalization
// is required to ensure optimum display with or without those classes to better
// address browser inconsistencies.

// Override content-box in Normalize (* isn't specific enough)
input[type="search"] {
	.box-sizing(border-box);
}

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {
	margin: 4px 0 0;
	margin-top: 1px \9; // IE8-9
	line-height: normal;
}

// Make range inputs behave like textual form controls
input[type="range"] {
	display: block;
	width: 100%;
}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
	height: auto;
}

// Focus for file, radio, and checkbox
input[type="radio"]:focus,
input[type="checkbox"]:focus {
	.tab-focus();
}

// Adjust output element
output {
	display: block;
	padding-top: (@padding-base-vertical + 1);
	font-size: @font-size-base;
	line-height: @line-height-base;
	color: @input-color;
}


// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]

.form-control {
	display: block;
	width: 100%;
	height: @input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
	padding: @padding-base-vertical @padding-base-horizontal;
	font-size: @font-size-base;
	line-height: @line-height-base;
	color: @input-color;
	background-color: @input-bg;
	background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
	border: 1px solid @input-border;
	border-radius: @input-border-radius; // Note: This has no effect on <select>s in some browsers, due to the limited stylability of <select>s in CSS.
	//.box-shadow(inset 0 1px 1px rgba(0,0,0,.075));
	//.transition(~"border-color ease-in-out .15s, box-shadow ease-in-out .15s");

	// Customize the `:focus` state to imitate native WebKit styles.
	//.form-control-focus();

	// Placeholder
	//.placeholder();

	// Unstyle the caret on `<select>`s in IE10+.
	&::-ms-expand {
		border: 0;
		background-color: transparent;
	}

	// Disabled and read-only inputs
	//
	// HTML5 says that controls under a fieldset > legend:first-child won't be
	// disabled if the fieldset is disabled. Due to implementation difficulty, we
	// don't honor that edge case; we style them as disabled anyway.
	&[disabled],
	&[readonly],
	fieldset[disabled] & {
		background-color: @input-bg-disabled;
		opacity: 1; // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655
	}

	&[disabled],
	fieldset[disabled] & {
		cursor: @cursor-disabled;
	}

	// Reset height for `textarea`s
	textarea& {
		height: auto;
	}
}


// Search inputs in iOS
//
// This overrides the extra rounded corners on search inputs in iOS so that our
// `.form-control` class can properly style them. Note that this cannot simply
// be added to `.form-control` as it's not specific enough. For details, see
// https://github.com/twbs/bootstrap/issues/11586.

input[type="search"] {
	-webkit-appearance: none;
}


// Special styles for iOS temporal inputs
//
// In Mobile Safari, setting `display: block` on temporal inputs causes the
// text within the input to become vertically misaligned. As a workaround, we
// set a pixel line-height that matches the given height of the input, but only
// for Safari. See https://bugs.webkit.org/show_bug.cgi?id=139848
//
// Note that as of 9.3, iOS doesn't support `week`.

@media screen and (-webkit-min-device-pixel-ratio: 0) {
	input[type="date"],
	input[type="time"],
	input[type="datetime-local"],
	input[type="month"] {
		&.form-control {
			line-height: @input-height-base;
		}

		&.input-sm,
		.input-group-sm & {
			line-height: @input-height-small;
		}

		&.input-lg,
		.input-group-lg & {
			line-height: @input-height-large;
		}
	}
}


// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
}


// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.radio,
.checkbox {
	position: relative;
	display: block;
	margin-top: 10px;
	margin-bottom: 10px;

	label {
		min-height: @line-height-computed; // Ensure the input doesn't jump when there is no text
		padding-left: 20px;
		margin-bottom: 0;
		font-weight: normal;
		cursor: pointer;
	}
}
.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
	position: absolute;
	margin-left: -20px;
	margin-top: 4px \9;
}

.radio + .radio,
.checkbox + .checkbox {
	margin-top: -5px; // Move up sibling radios or checkboxes for tighter spacing
}

// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {
	position: relative;
	display: inline-block;
	padding-left: 20px;
	margin-bottom: 0;
	vertical-align: middle;
	font-weight: normal;
	cursor: pointer;
}
.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
	margin-top: 0;
	margin-left: 10px; // space out consecutive inline controls
}

// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"] {
	&[disabled],
	&.disabled,
	fieldset[disabled] & {
		cursor: @cursor-disabled;
	}
}
// These classes are used directly on <label>s
.radio-inline,
.checkbox-inline {
	&.disabled,
	fieldset[disabled] & {
		cursor: @cursor-disabled;
	}
}
// These classes are used on elements with <label> descendants
.radio,
.checkbox {
	&.disabled,
	fieldset[disabled] & {
		label {
			cursor: @cursor-disabled;
		}
	}
}


// Static form control text
//
// Apply class to a `p` element to make any string of text align with labels in
// a horizontal form layout.

.form-control-static {
	// Size it appropriately next to real form controls
	padding-top: (@padding-base-vertical + 1);
	padding-bottom: (@padding-base-vertical + 1);
	// Remove default margin from `p`
	margin-bottom: 0;
	min-height: (@line-height-computed + @font-size-base);

	&.input-lg,
	&.input-sm {
		padding-left: 0;
		padding-right: 0;
	}
}


// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// The `.form-group-* form-control` variations are sadly duplicated to avoid the
// issue documented in https://github.com/twbs/bootstrap/issues/15074.

/*.input-sm {
	.input-size(@input-height-small; @padding-small-vertical; @padding-small-horizontal; @font-size-small; @line-height-small; @input-border-radius-small);
}
.form-group-sm {
	.form-control {
		height: @input-height-small;
		padding: @padding-small-vertical @padding-small-horizontal;
		font-size: @font-size-small;
		line-height: @line-height-small;
		border-radius: @input-border-radius-small;
	}
	select.form-control {
		height: @input-height-small;
		line-height: @input-height-small;
	}
	textarea.form-control,
	select[multiple].form-control {
		height: auto;
	}
	.form-control-static {
		height: @input-height-small;
		min-height: (@line-height-computed + @font-size-small);
		padding: (@padding-small-vertical + 1) @padding-small-horizontal;
		font-size: @font-size-small;
		line-height: @line-height-small;
	}
}

.input-lg {
	.input-size(@input-height-large; @padding-large-vertical; @padding-large-horizontal; @font-size-large; @line-height-large; @input-border-radius-large);
}
.form-group-lg {
	.form-control {
		height: @input-height-large;
		padding: @padding-large-vertical @padding-large-horizontal;
		font-size: @font-size-large;
		line-height: @line-height-large;
		border-radius: @input-border-radius-large;
	}
	select.form-control {
		height: @input-height-large;
		line-height: @input-height-large;
	}
	textarea.form-control,
	select[multiple].form-control {
		height: auto;
	}
	.form-control-static {
		height: @input-height-large;
		min-height: (@line-height-computed + @font-size-large);
		padding: (@padding-large-vertical + 1) @padding-large-horizontal;
		font-size: @font-size-large;
		line-height: @line-height-large;
	}
}*/


// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.

.help-block {
	display: block; // account for any element using help-block
	margin-top: 5px;
	margin-bottom: 10px;
	color: lighten(@text-color, 25%); // lighten the text some for contrast
}

// Horizontal forms
//
// Horizontal forms are built on grid classes and allow you to create forms with
// labels on the left and inputs on the right.

.form-horizontal {

	// Consistent vertical alignment of radios and checkboxes
	//
	// Labels also get some reset styles, but that is scoped to a media query below.
	.radio,
	.checkbox,
	.radio-inline,
	.checkbox-inline {
		margin-top: 0;
		margin-bottom: 0;
		padding-top: (@padding-base-vertical + 1); // Default padding plus a border
	}
	// Account for padding we're adding to ensure the alignment and of help text
	// and other content below items
	.radio,
	.checkbox {
		min-height: (@line-height-computed + (@padding-base-vertical + 1));
	}

	// Make form groups behave like rows
	.form-group {
		.make-row();
	}

	// Validation states
	//
	// Reposition the icon because it's now within a grid column and columns have
	// `position: relative;` on them. Also accounts for the grid gutter padding.
	.has-feedback .form-control-feedback {
		right: floor((@grid-gutter-width / 2));
	}
}


.nice-placeholder() {
	color: transparent;
	//color: rgba(0,0,0,.4);
	transition-duration: .2s;
	transition-timing-function: cubic-bezier(.4,0,.2,1);
	font-size: 80%;
}

@padb: 8px;

.user-invalid {
	+ label {
		&:after {
			left: 0;
			visibility: visible;
			width: 100%;
		}
	}

	&.valueMissing {
		+ label {
			color: @brand-warning;
			&:after {
				background-color: @brand-warning;
			}
		}
	}
	&.patternMismatch {
		+ label {
			color: @state-danger-text;
			&:after {
				background-color: @state-danger-text;
			}
		}
	}

	&[aria-invalid="true"] {
		+ label:after {
			bottom: 37px;
		}
	}
}

.feedback.visible {
	display: block;
	padding: 6px 0;
	font-size: 80%;

	&[visible-when-invalid="valueMissing"] { color: @brand-warning; }
	&[visible-when-invalid="patternMismatch"] { color: @state-danger-text; }
}

.form-group {
	position: relative;
	font-size: 16px;
	margin: 0;
	padding: 20px 0 @padb;
}

label {
	bottom: 0;
	//color: @sd-color;
	color: rgba(0,0,0,.26);
	//font-size: 12px;
	font-size: 16px;
	font-weight: 400;
	left: 0;
	right: 0;
	pointer-events: none;
	position: absolute;
	display: block;
	//top: 4px;
	top: 31px;
	width: 100%;
	overflow: hidden;
	white-space: nowrap;
	text-align: left;
	margin: 0;
	transition-duration: .2s;
	transition-timing-function: cubic-bezier(.4,0,.2,1);
	visibility: visible;

	&:after {
		background-color: @main-color;
		bottom: @padb;
		content: '';
		height: 2px;
		left: 45%;
		position: absolute;
		transition-duration: .2s;
		transition-timing-function: cubic-bezier(.4,0,.2,1);
		-webkit-transition-property: left, visibility, width; /* Safari */
		transition-property: left, visibility, width;
		visibility: hidden;
		width: 10px;
	}
}

// Test
input:not([type="submit"]),
input:not([type="reset"]),
input:not([type="button"]),
input:not([type="radio"]),
input:not([type="checkbox"]),
input:not([type="color"]),
textarea,
textarea.form-control {
	border: none;
	border-bottom: 1px solid rgba(0,0,0,.12);
	box-shadow: none;
	font-size: 16px;
	font-family: "Helvetica","Arial",sans-serif;
	margin: 0;
	padding: 4px 0;
	background: 0 0;
	text-align: left;
	color: inherit;
}

input,
textarea {
	&::-webkit-input-placeholder {
		.nice-placeholder();
	}
	&::-moz-placeholder {
		.nice-placeholder();
	}
	&:-ms-input-placeholder {
		.nice-placeholder();
	}
	&:-moz-placeholder {
		.nice-placeholder();
	}

	&:focus, &.patternMismatch, &.user-valid {
		+ label {
			font-size: 12px;
			top: 4px;
			visibility: visible;
		}
	}

	&:focus, &.patternMismatch {
		+ label {
			&:after {
				left: 0;
				visibility: visible;
				width: 100%;
			}
		}
	}

	&:focus {
		+ label {
			color: @main-color;
		}
	}

	&:focus {
		box-shadow: none;
		outline: none;

		&::-webkit-input-placeholder {
			color: rgba(0,0,0,.26);
		}
		&::-moz-placeholder {
			color: rgba(0,0,0,.26);
		}
		&:-ms-input-placeholder {
			color: rgba(0,0,0,.26);
		}
		&:-moz-placeholder {
			color: rgba(0,0,0,.26);
		}
	}
}